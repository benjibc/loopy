# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
CXX=clang++
GTEST_DIR = ../third_party/googletest

# Where to find user code.
USER_DIR = ./lib_tests
LPATH= -L../third_party/lib

TOPDIR=../
SRC=../sys/
APPSRC=./app/*
APPSRC2=./app/*/*
LIBS=-lctemplate -levhtp -lpthread -levent

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread 
CXXFLAGS += -I../third_party/include -I../../ -std=c++11

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
SOURCES=$(wildcard $(USER_DIR)/*.cpp)
SOURCES+=$(wildcard $(SRC)/*.cpp)
SOURCES+=$(wildcard $(APPSRC)/*.cpp)
SOURCES+=$(wildcard $(APPSRC2)/*.cpp)
SOURCES+=$(wildcard $(TOPDIR)/*.cpp)

TGT=obj
OBJS=$(addprefix $(TGT)/, $(notdir $(SOURCES:.cpp=.o)))

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : unittest 

clean :
	rm -f $(OBJS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(TGT)/%.o: $(USER_DIR)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH) $(LIBS) -c $< -o $@

$(TGT)/%.o: $(SRC)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH) $(LIBS) -c $< -o $@
$(TGT)/%.o: $(SRC)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH) $(LIBS) -c $< -o $@
$(TGT)/%.o: $(APPSRC)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH) $(LIBS) -c $< -o $@
$(TGT)/%.o: $(APPSRC2)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH) $(LIBS) -c $< -o $@
$(TGT)/%.o: $(TOPDIR)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH) $(LIBS) -c $< -o $@

unittest: $(OBJS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH)  $^ $(LIBS) -o $@.bin

run: 
	LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../third_party/lib; export LD_LIBRARY_PATH; ./unittest.bin
