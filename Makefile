CC=clang++

SRC=./library/sys
CTRL_SRC=./app/controllers
CTRL_SRC2+=./app/controllers/*
MODEL_SRC+=./app/models
MODEL_SRC2+=./app/models/*

TGT=obj
SOURCES=$(wildcard $(SRC)/*.cpp)
SOURCES+=$(wildcard $(CTRL_SRC)/*.cpp)
SOURCES+=./library/threadlocal.cpp ./library/threadshared.cpp
OBJS=$(addprefix $(TGT)/, $(notdir $(SOURCES:.cpp=.o)))

CFLAGS=-Wall -I./library/third_party/include -I./ -std=c++11
LIBS=-lctemplate -levhtp -lpthread -levent -lhiredis

LPATH= -L./library/third_party/lib -L./drivers/third_party/lib

all: server 

$(TGT)/%.o: $(SRC)/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

#############################:
# targets to build controller code and model code

$(TGT)/%.o: $(CTRL_SRC)/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

$(TGT)/%.o: $(CTRL_SRC2)/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

$(TGT)/%.o: $(MODEL_SRC)/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

$(TGT)/%.o: $(MODEL_SRC2)/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

## end of target for controller and model code
#################################

$(TGT)/%.o: ./library/%.cpp
	$(CC) $(CFLAGS) -c $< -o $@

server: $(OBJS)
	$(CC) $(CFLAGS) $(LPATH) $(OBJS) $(LIBS) -o loopy.bin main.cpp 

run: all
	LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./library/third_party/lib:./drivers/third_party/lib; export LD_LIBRARY_PATH; ./loopy.bin
mem_run: all
	LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./library/third_party/lib:./drivers/third_party/lib; export LD_LIBRARY_PATH; valgrind ./loopy.bin

init_repo:
	cd library && sh fetch_libs.sh

clean:
	rm obj/*.o

#########################################################################
# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ./library/third_party/googletest/


# Where to find user code.
USER_DIR = ./app/tests

SRC=./library/sys/
T_APPSRC=./app/*
T_APPSRC2=./app/*/*
LIBS=-lctemplate -levhtp -lpthread -levent -lhiredis

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS = -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread 
CXXFLAGS += -I./library/third_party/include -I./ -std=c++11 

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
T_SOURCES=$(wildcard $(USER_DIR)/*.cpp)
T_SOURCES+=$(wildcard $(SRC)/*.cpp)
T_SOURCES+=$(wildcard $(T_APPSRC)/*.cpp)
T_SOURCES+=$(wildcard $(T_APPSRC2)/*.cpp)
T_SOURCES+=./library/threadlocal.cpp ./library/threadshared.cpp

T_TGT=obj
T_OBJS=$(addprefix $(T_TGT)/, $(notdir $(T_SOURCES:.cpp=.o)))

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(T_TGT)/%.o: $(USER_DIR)/%.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH) $(LIBS) -c $< -o $@

unittest: $(T_OBJS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LPATH)  $^ $(LIBS) -o $@.bin

test: unittest
	LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./library/third_party/lib:./drivers/third_party/lib; export LD_LIBRARY_PATH; ./unittest.bin
